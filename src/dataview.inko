# DataView
#
# @warning This is WIP -- so far only methods for int short and byte have been implemented.
# This module provides methods like Java's DataOutput and DataInput to manipulate a ByteArray
# This is useful to read many bytes at once when building and parsing packets
# @see {@link https://docs.oracle.com/javase/8/docs/api/java/io/DataOutput.html|DataOutput}
# @see {@link https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html|DataInput}
import std.byte_array(IntoByteArray)

trait pub IntoReader {
  fn pub move into_reader -> Reader
}

# TODO Should an Uint64 class be implemented?

# Similar to JavaScript's DataView
# @see {@link https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html|DataInput}
class pub Reader {
  let pub @bytes: ByteArray

  fn getUint16(from: Int, littleEndian: Bool) -> Int {
    if (littleEndian) {
      (@bytes.get(from + 1) << 8) | @bytes.get(from)
    } else {
      (@bytes.get(from) << 8) | @bytes.get(from + 1)
    }
  }

  fn pub getUint16BE(from: Int) -> Int {
    getUint16(from, false)
  }

  fn pub getUint16LE(from: Int) -> Int {
    getUint16(from, true)
  }

  # @warning Not safe to use: Values bigger than Inko's Int limit (Int64) will overflow to negative numbers
  fn pub getUint64BE(from: Int) -> Int {
    let mut value = 0
    let mut i = 0
    while i < 8 {
      value = (value << 8) | @bytes.get(from + (i := i + 1))
    }
    value
  }

  # @warning Not safe to use: Values bigger than Inko's Int limit (Int64) will overflow to negative numbers
  fn pub getUint64LE(from: Int) -> Int {
    let mut value = 0
    let mut i = 7
    while i >= 0 {
      value = (value << 8) | @bytes.get(from + (i := i - 1))
    }
    value
  }

  fn pub getInt(from: Int) -> Int {
    (
      ((@bytes.get(from)     & 0xFF) << 24)  | 
      ((@bytes.get(from + 1) & 0xFF) << 16)  |
      ((@bytes.get(from + 2) & 0xFF) << 8)   |
      (@bytes.get(from + 3) & 0xFF)
    ) >> 0
  }

  fn pub getShort(from: Int) -> Int {
    (@bytes.get(from) & 0xFF << 8) | (@bytes.get(from + 1) & 0xFF)
  }

  fn pub getByte(from: Int) -> Int {
    @bytes.get(from)
  }

  fn pub size -> Int {
    @bytes.size
  }

  fn pub static new(bytes: ByteArray) -> Reader {
    Reader(bytes)
  }
}

impl IntoReader for Reader {
  fn pub move into_reader -> Reader {
    self
  }
}

impl IntoByteArray for Reader {
  fn pub move into_byte_array -> ByteArray {
    @bytes
  }
}

# Wrapper around Reader that consumes bytes every time you read
# @see {@link https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html|DataInput}
class pub Consumer {
  let @reader: Reader
  let @consumed: Int

  # consume method is private
  fn mut consume(bytes: Int) -> Int {
    @consumed := @consumed + bytes
  }

  fn pub mut readUint16BE -> Int {
    @reader.getUint16BE(consume(2))
  }

  fn pub mut readUint16LE -> Int {
    @reader.getUint16LE(consume(2))
  }

  fn pub mut readUint64BE -> Int {
    @reader.getUint64BE(consume(8))
  }

  fn pub mut readUint64LE -> Int {
    @reader.getUint64LE(consume(8))
  }

  fn pub mut readInt -> Int {
    @reader.getInt(consume(4))
  }

  fn pub mut readShort -> Int {
    @reader.getShort(consume(2))
  }

  fn pub mut readByte -> Int {
    @reader.getByte(consume(1))
  }

  fn pub size -> Int {
    @reader.size - @consumed
  }

  fn pub static new(reader: Reader) -> Consumer {
    Consumer(reader, 0)
  }
}

# @see {@link https://docs.oracle.com/javase/8/docs/api/java/io/DataOutput.html|DataOutput}
class pub Writer {
  let pub @bytes: mut ByteArray

  fn pub mut writeShort(value: Int) {
    @bytes.push((value >> 8) & 0xFF)
    @bytes.push(value & 0xFF)
  }

  fn pub mut writeByte(value: Int) {
    @bytes.push(value)
  }
}